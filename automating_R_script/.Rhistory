getwd()
install.packages("quarto")
if (!require("pacman")) install.packages("pacman")
pacman::p_load("tidyverse", "polite", "rvest")
set.seed(8675309)
url <- "https://www.espn.com/nfl/scoreboard/"
session <- bow(url)
scrape(session) %>%
html_element(".ScoreboardScoreCell__Competitors")
scrape(session) %>%
html_elements(".Mb(3px)")
scrape(session) %>%
html_elements(css = ".Mb(3px)")
scrape(session) %>%
html_elements(css = "Mb(3px)")
url <- "https://sports.yahoo.com/nfl/scoreboard/"
session <- bow(url)
scrape(session) %>%
html_elements(css = "Mb(3px)")
scrape(session) %>%
html_elements(css = ".Mb(3px)")
scrape(session) %>%
html_elements(css = ".Mb\(3px\)")
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)")
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_text()
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_chldren()
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_children()
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_text2()
url <- "https://sports.yahoo.com/nfl/scoreboard/?confId=&schedState=2&dateRange=18"
session <- bow(url)
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_text2()
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_text()
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_text2()
url <- "https://sports.yahoo.com/nfl/scoreboard/?confId=&schedState=2&dateRange=18"
session <- bow(url)
scrape(session) %>%
html_elements(css = ".D\\(tb\\) team") %>%
html_text2()
scrape(session) %>%
html_elements(css = ".D\\(tb\\) team")
scrape(session) %>%
html_elements(css = ".D(tb) team")
scrape(session) %>%
html_elements(css = ".D\\(tb\\) team")
scrape(session) %>%
html_element(css = ".D\\(tb\\) team")
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)")
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_children()
source("~/.active-rstudio-document", echo=TRUE)
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_children() %>%
html_text()
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_children() %>%
html_text() -> text_output
text_output <- map_chr(text_output, ~str_squish(.x))
text_output
text_output[1]
text_output[1][5]
text_output <- map_chr(text_output, ~str_remove_all(.x, "\\s+"))
text_output[1]
text_output <- map_chr(text_output, ~str_replace_all(.x,
"([a-z])([A-Z0-9])",
"\\\1 \\\2"))
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_children() %>%
html_text() -> text_output
text_output <- map_chr(text_output, ~str_remove_all(.x, "\\s+"))
text_output <- map_chr(text_output, ~str_replace_all(.x,
"([a-z])([A-Z0-9])",
"\\1 \\2"))
text_output
tibble(text_output)
tibble(team = text_output)
tibble(team = text_output) %>%
mutate(score = str_extract(team, "[0-9]+$"))
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "(?<=\\s)[0-9]+$"))
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$"))
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score)
pacman::p_load("tidyverse", "polite", "rvest", "jsonlite")
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
toJSON()
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
mutate(opponent = case_when(
row_number() %% 2 == 0 ~ lead(team),
T ~ "test"
))
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
mutate(opponent = case_when(
row_number() %% 2 == 0 ~ lag(team),
T ~ lead(team)
))
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
mutate(opponent = case_when(
row_number() %% 2 == 0 ~ lag(team),
T ~ lead(team)
)) %>%
filter(row_number() %% 2 == 1)
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
mutate(home = case_when(
row_number() %% 2 == 0 ~ lag(team),
T ~ lead(team)
)) %>% View()
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
mutate(home = case_when(
row_number() %% 2 == 0 ~ lag(team),
T ~ lead(team)
)) %>%
mutate(home_score = case_when(
row_number() %% 2 == 0 ~ lag(score),
T ~ lead(score)
)) %>%
filter(row_number() %% 2 == 1)
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
mutate(home = case_when(
row_number() %% 2 == 0 ~ lag(team),
T ~ lead(team)
)) %>%
mutate(home_score = case_when(
row_number() %% 2 == 0 ~ lag(score),
T ~ lead(score)
)) %>%
filter(row_number() %% 2 == 1) %>%
rename("away" = team, "away_score" = score)
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
mutate(home_team = case_when(
row_number() %% 2 == 0 ~ lag(team),
T ~ lead(team)
)) %>%
mutate(home_score = case_when(
row_number() %% 2 == 0 ~ lag(score),
T ~ lead(score)
)) %>%
filter(row_number() %% 2 == 1) %>%
rename("away_team" = team, "away_score" = score)
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
mutate(home_team = case_when(
row_number() %% 2 == 0 ~ lag(team),
T ~ lead(team)
)) %>%
mutate(home_score = case_when(
row_number() %% 2 == 0 ~ lag(score),
T ~ lead(score)
)) %>%
filter(row_number() %% 2 == 1) %>%
rename("away_team" = team, "away_score" = score) %>%
mutate(across(contains("score"), as.numeric)) %>%
mutate(winner = case_when(
away_score > home_score ~ away_team,
home_score > away_score ~ home_team,
T ~ "other"
))
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
mutate(home_team = case_when(
row_number() %% 2 == 0 ~ lag(team),
T ~ lead(team)
)) %>%
mutate(home_score = case_when(
row_number() %% 2 == 0 ~ lag(score),
T ~ lead(score)
)) %>%
filter(row_number() %% 2 == 1) %>%
rename("away_team" = team, "away_score" = score) %>%
mutate(across(contains("score"), as.numeric)) %>%
mutate(winner = case_when(
away_score > home_score ~ away_team,
home_score > away_score ~ home_team,
T ~ "other"
)) %>%
toJSON()
if (!require("pacman")) install.packages("pacman")
pacman::p_load("tidyverse", "polite", "rvest", "jsonlite")
set.seed(8675309)
url <- "https://sports.yahoo.com/nfl/scoreboard/?confId=&schedState=2&dateRange=18"
session <- bow(url)
scrape(session) %>%
html_elements(css = ".Mb\\(3px\\)") %>%
html_children() %>%
html_text() -> text_output
text_output
text_output <- map_chr(text_output, ~str_remove_all(.x, "\\s+"))
text_output
text_output <- map_chr(text_output, ~str_replace_all(.x,
"([a-z])([A-Z0-9])",
"\\1 \\2"))
text_output
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
mutate(home_team = case_when(
row_number() %% 2 == 0 ~ lag(team),
T ~ lead(team)
)) %>%
mutate(home_score = case_when(
row_number() %% 2 == 0 ~ lag(score),
T ~ lead(score)
)) %>%
filter(row_number() %% 2 == 1) %>%
rename("away_team" = team, "away_score" = score) %>%
mutate(across(contains("score"), as.numeric)) %>%
mutate(winner = case_when(
away_score > home_score ~ away_team,
home_score > away_score ~ home_team,
T ~ "other"
)) %>%
toJSON()
tibble(all = text_output) %>%
mutate(score = str_extract(all, "[0-9]+$"),
team = str_remove(all, "\\s+[0-9]+$")) %>%
select(team, score) %>%
mutate(home_team = case_when(
row_number() %% 2 == 0 ~ lag(team),
T ~ lead(team)
)) %>%
mutate(home_score = case_when(
row_number() %% 2 == 0 ~ lag(score),
T ~ lead(score)
)) %>%
filter(row_number() %% 2 == 1) %>%
rename("away_team" = team, "away_score" = score) %>%
mutate(across(contains("score"), as.numeric)) %>%
mutate(winner = case_when(
away_score > home_score ~ away_team,
home_score > away_score ~ home_team,
T ~ "other"
)) %>% View()
rm(list = ls())
getwd()
setwd("./git_repos")
setwd("C:/Users/cdawg/git_repos")
if (!require("pacman")) install.packages("pacman")
library("pacman")
pacman::p_load("tidyverse", "timetk", "tidymodels", "modeltime", "janitor")
set.seed(8675309)
fin_prices <- read_csv("./data/fin_data.csv") |> clean_names()
getwd()
setwd("C:/Users/cdawg/git_repos/py_hackaround/automating_R_script")
fin_prices <- read_csv("./data/fin_data.csv") |> clean_names()
fin_prices <- read_csv("./data/fin_data.csv") |> clean_names()
fin_prices |>
plot_time_series(datetime, adj_close)
fin_prices <- read_csv("./data/fin_data.csv") %>% clean_names()
fin_prices %>%
plot_time_series(datetime, adj_close)
prep_fin %>%
s
fin_prices %>%
select(datetime, adj_close) -> prep_fin
time_series_split(
prep_fin,
assess = 5,
cumulative = T
) -> splits
splits
add_model(
arima_reg() %>%
set_engine("auto_arima")
) %>%
add_recipe(
recipe = recipe('adj_close' ~ "datetime", training(splits))
) %>%
fit(training(splits))
workflow() %>%
add_model(
arima_reg() %>%
set_engine("auto_arima")
) %>%
add_recipe(
recipe = recipe('adj_close' ~ "datetime", training(splits))
) %>%
fit(training(splits))
wflw_fit <- workflow() %>%
add_model(
arima_reg() %>%
set_engine("auto_arima")
) %>%
add_recipe(
recipe = recipe(adj_close ~ datetime, training(splits))
) %>%
fit(training(splits))
model_tbl <- modeltime_table(wflw_fit)
calib_tbl <- model_tbl %>%
modeltime_calibrate(testing(splits))
modeltime_accuracy(calib_tbl)
acc_tbl <- modeltime_accuracy(calib_tbl)
acc_tbl %>% table_modeltime_accuracy()
test_forecast <- calib_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = prep_fin
)
test_forecast %>%
plot_modeltime_forecast()
if (!require("pacman")) install.packages("pacman")
pacman::p_load("tidyverse", "timetk", "tidymodels", "modeltime", "janitor")
set.seed(8675309)
fin_prices <- read_csv("./data/fin_data.csv") %>% clean_names()
fin_prices %>%
plot_time_series(datetime, adj_close)
fin_prices %>%
select(datetime, adj_close) -> prep_fin
splits <- time_series_split(
prep_fin,
assess = 5,
cumulative = T
)
wflw_fit <- workflow() %>%
add_model(
arima_reg() %>%
set_engine("auto_arima")
) %>%
add_recipe(
recipe = recipe(adj_close ~ datetime, training(splits))
) %>%
fit(training(splits))
model_tbl <- modeltime_table(wflw_fit)
calib_tbl <- model_tbl %>%
modeltime_calibrate(testing(splits))
acc_tbl <- modeltime_accuracy(calib_tbl)
acc_tbl %>% table_modeltime_accuracy()
test_forecast <- calib_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = prep_fin
)
test_forecast %>%
plot_modeltime_forecast()
future_forecast <- calib_tbl %>%
modeltime_refit(prep_fin) %>%
modeltime_forecast(
h = 6,
actual_data = prep_fin
)
future_forecast %>%
plot_modeltime_forecast()
future_forecast
future_forecast %>%
select(.index:.conf_hi) %>%
set_names(c("Datetime", "Adj Close", "Lower Bound", "Upper Bound"))
future_forecast %>%
select(.index:.conf_hi) %>%
set_names(c("Datetime", "Adj Close", "Lower Bound", "Upper Bound")) %>%
write_csv("./data/fin_forecast.csv")
